{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue255;\red29\green38\blue42;
\red245\green247\blue249;\red151\green0\blue126;\red20\green0\blue196;\red73\green17\blue135;\red181\green0\blue19;
\red12\green90\blue1;}
{\*\expandedcolortbl;;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;\cssrgb\c14902\c19608\c21961;
\cssrgb\c96863\c97647\c98039;\cssrgb\c66667\c5098\c56863;\cssrgb\c10980\c0\c81176;\cssrgb\c36078\c14902\c60000;\cssrgb\c76863\c10196\c8627;
\cssrgb\c0\c41569\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 https://www.youtube.com/watch?v=bu1quf2rOp8\
\
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs28 \cf2 \cb3 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dynamic programming:\cb1 \uc0\u8232 \cb3 Time complexity : O(n)\cb1 \uc0\u8232 \cb3 Space complexity: O(n)\cb1 \
\pard\pardeftab720\sl416\partightenfactor0

\f2\fs26 \cf4 \cb5 \strokec4 Explanation: \
Let's move from left to right.\
Question :How many unit of water can one bar(height[i]) trap?\
Answer:  it depends maximum height from the left side, the maximum height from the right side, and the height of the bar.\
\
lower_bound = min (maximum_left, maximum_right)\
\
height =         [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\
maximum_left =   [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]\
maximum_right =  [3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 0]\
lower_bound =    [0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0]\
water_trap_at_i =[0, 0, 1, -1, 1,2, 1, -1,0, 1, -1, 0]  \
\
 ignore negative \cf6 \strokec6 values\cf4 \strokec4  \cf6 \strokec6 in\cf4 \strokec4  water_trap_at_i, it means,\
 the height \cf6 \strokec6 at\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  i \cf6 \strokec6 is\cf4 \strokec4  \cf6 \strokec6 high\cf4 \strokec4  \cf6 \strokec6 than\cf4 \strokec4  the \cf6 \strokec6 lower\cf4 \strokec4  bound.\
\
\
water_level means the \cf6 \strokec6 at\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  i, the potential water \cf6 \strokec6 level\cf4 \strokec4  can reach.\
\pard\pardeftab720\sl416\partightenfactor0
\cf6 \strokec6 index\cf4 \strokec4   \cf7 \strokec7 0\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4  \cf7 \strokec7 2\cf4 \strokec4  \cf7 \strokec7 3\cf4 \strokec4  \cf7 \strokec7 4\cf4 \strokec4  \cf7 \strokec7 5\cf4 \strokec4 \
height \cf7 \strokec7 0\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4  \cf7 \strokec7 0\cf4 \strokec4  \cf7 \strokec7 2\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4  \cf7 \strokec7 0\cf4 \strokec4 \
\pard\pardeftab720\sl416\partightenfactor0
\cf7 \strokec7 2\cf4 \strokec4             -\
\cf7 \strokec7 1\cf4 \strokec4         -       -\
\cf7 \strokec7 0\cf4 \strokec4       -    -       -\
the water_level \cf6 \strokec6 at\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  i should be the \cf6 \strokec6 lower\cf4 \strokec4  height \cf6 \strokec6 of\cf4 \strokec4  maximum_left \cf6 \strokec6 and\cf4 \strokec4  maximum_right.\
\pard\pardeftab720\sl416\partightenfactor0
\cf6 \strokec6 for\cf4 \strokec4  example: \
\cf6 \strokec6 at\cf4 \strokec4  \cf6 \strokec6 index\cf4 \strokec4  \cf7 \strokec7 2\cf4 \strokec4 , the maximum_left = \cf7 \strokec7 1\cf4 \strokec4 , the maximum_right = \cf7 \strokec7 2.\cf4 \strokec4  \
the \cf6 \strokec6 lower\cf4 \strokec4  boundry height \cf6 \strokec6 is\cf4 \strokec4  \cf7 \strokec7 1\cf4 \strokec4 , \
the amount \cf6 \strokec6 of\cf4 \strokec4  water can be traped here equals \cf6 \strokec6 lower\cf4 \strokec4  boundry \cf6 \strokec6 minus\cf4 \strokec4  height.\
\cf6 \strokec6 class\cf4 \strokec4  \cf8 \strokec8 Solution\cf4 \strokec4 (\cf8 \strokec8 object\cf4 \strokec4 ):\
    \cf6 \strokec6 def\cf4 \strokec4  \cf7 \strokec7 trap\cf4 \strokec4 (\cf8 \strokec8 self, height\cf4 \strokec4 ):\
        \cf9 \strokec9 """\
        :type height: List[int]\
        :rtype: int\
        """\cf4 \strokec4 \
        \cf6 \strokec6 if\cf4 \strokec4  height == []:\
            \cf6 \strokec6 return\cf4 \strokec4  \cf7 \strokec7 0\cf4 \strokec4 \
\
        n = \cf8 \strokec8 len\cf4 \strokec4 (height)\
        max_left = [\cf7 \strokec7 0\cf4 \strokec4 ]* n\
        max_right = [\cf7 \strokec7 0\cf4 \strokec4 ]* n\
        \cf10 \strokec10 ##print(max_left, height)\cf4 \strokec4 \
        max_left[\cf7 \strokec7 0\cf4 \strokec4 ] = \cf7 \strokec7 0\cf4 \strokec4 \
        max_right[n-\cf7 \strokec7 1\cf4 \strokec4 ] = \cf7 \strokec7 0\cf4 \strokec4 \
        \cf6 \strokec6 for\cf4 \strokec4  i \cf6 \strokec6 in\cf4 \strokec4  \cf8 \strokec8 range\cf4 \strokec4  (\cf7 \strokec7 1\cf4 \strokec4 , n):\
            max_left[i] = \cf8 \strokec8 max\cf4 \strokec4 (max_left[i - \cf7 \strokec7 1\cf4 \strokec4 ], height[i-\cf7 \strokec7 1\cf4 \strokec4 ])\
             \
        \cf6 \strokec6 for\cf4 \strokec4  i \cf6 \strokec6 in\cf4 \strokec4  \cf8 \strokec8 range\cf4 \strokec4 (n-\cf7 \strokec7 2\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 ):\
           \
            max_right[i] = \cf8 \strokec8 max\cf4 \strokec4 (max_right[i + \cf7 \strokec7 1\cf4 \strokec4 ], height[i + \cf7 \strokec7 1\cf4 \strokec4 ])\
\
        output = \cf7 \strokec7 0\cf4 \strokec4 \
        print(max_left, max_right)\
        \
        \cf6 \strokec6 for\cf4 \strokec4  i \cf6 \strokec6 in\cf4 \strokec4  \cf8 \strokec8 range\cf4 \strokec4 (n):\
		    \
            lower_boundary = \cf8 \strokec8 min\cf4 \strokec4 (max_left[i], max_right[i])\
            \
            max_trap_at_i = lower_boundary - height[i]\
            \
            \cf6 \strokec6 if\cf4 \strokec4  max_trap_at_i > \cf7 \strokec7 0\cf4 \strokec4 :\
                output += max_trap_at_i\
                \
        \cf6 \strokec6 return\cf4 \strokec4  output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 2 Pointer\cb1 \uc0\u8232 \cb3 Time complexity: O(n)\cb1 \uc0\u8232 \cb3 Space compexity:O(1)\cb1 \
\pard\pardeftab720\sl416\partightenfactor0

\f2\fs26 \cf8 \cb5 \strokec8 Let's\cf4 \strokec4  look at the maximum_left, maximum_right, lower_bound\
used \cf6 \strokec6 in\cf4 \strokec4  \cf6 \strokec6 dynamic\cf4 \strokec4  programming\
and think about how to improve them. \
\
height =         [\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 ]\
maximum_left =   [\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 ]\
maximum_right =  [\cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 ]\
lower_bound =    [\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 ]\
water_trap_at_i =[\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 ,\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , -\cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 ]  \
\
\pard\pardeftab720\sl416\partightenfactor0

\f3 \cf4 \uc0\u10024 
\f2 \cf8 \strokec8 Are\cf4 \strokec4  they necessary?
\f3 \uc0\u10024 
\f2 \
\pard\pardeftab720\sl416\partightenfactor0
\cf8 \strokec8 No\cf4 \strokec4 . they are not.  \
\cf8 \strokec8 We\cf4 \strokec4  only need store them \cf6 \strokec6 as\cf4 \strokec4  variables.\
l_max: moving from \cf6 \strokec6 left\cf4 \strokec4  to \cf6 \strokec6 right\cf4 \strokec4 , updating the maximum height seeing so far.\
r_max: moving from \cf6 \strokec6 right\cf4 \strokec4  to \cf6 \strokec6 left\cf4 \strokec4 , updating the maximum height seeing so far.\
\cf8 \strokec8 It\cf4 \strokec4  becomes \cf7 \strokec7 2\cf4 \strokec4  pointers moving towards to each other.\
\
height =         [\cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 0\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 3\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 , \cf7 \strokec7 2\cf4 \strokec4 , \cf7 \strokec7 1\cf4 \strokec4 ]\
                  ^                                ^\
l = \cf7 \strokec7 0\cf4 \strokec4 , r = \cf7 \strokec7 11\cf4 \strokec4      l_max = \cf7 \strokec7 0\cf4 \strokec4                         r_max = \cf7 \strokec7 1\cf4 \strokec4    answer = \cf7 \strokec7 0\cf4 \strokec4 \
                     ^                          ^\
l = \cf7 \strokec7 1\cf4 \strokec4 , r = \cf7 \strokec7 10\cf4 \strokec4      l_max = \cf7 \strokec7 1\cf4 \strokec4                      r_max = \cf7 \strokec7 2\cf4 \strokec4       answer = \cf7 \strokec7 0\cf4 \strokec4 \
\
\
\pard\pardeftab720\sl416\partightenfactor0
\cf6 \strokec6 class\cf4 \strokec4  \cf8 \strokec8 Solution\cf4 \strokec4 :\
    \cf6 \strokec6 def\cf4 \strokec4  \cf7 \strokec7 trap\cf4 \strokec4 (\cf8 \strokec8 self, height: List[int]\cf4 \strokec4 ) -> int:\
        ans = \cf7 \strokec7 0\cf4 \strokec4 \
        l,r = \cf7 \strokec7 0\cf4 \strokec4  , \cf8 \strokec8 len\cf4 \strokec4 (height) -\cf7 \strokec7 1\cf4 \strokec4 \
        l_max, r_max = \cf7 \strokec7 0\cf4 \strokec4 ,\cf7 \strokec7 0\cf4 \strokec4 \
        \cf6 \strokec6 while\cf4 \strokec4  l < r:\
		\cf10 \strokec10 # case 1: lower_bound is from left.\cf4 \strokec4 \
            \cf6 \strokec6 if\cf4 \strokec4  height[l] < height[r]:\
                \cf6 \strokec6 if\cf4 \strokec4  height[l] >= l_max:\
                    l_max = height[l]\
                \cf6 \strokec6 else\cf4 \strokec4 :\
                    ans += l_max - height[l]\
                l += \cf7 \strokec7 1\cf4 \strokec4 \
			\cf10 \strokec10 # case 2: the lower_bound is from right\cf4 \strokec4 \
            \cf6 \strokec6 else\cf4 \strokec4 :\
                \cf6 \strokec6 if\cf4 \strokec4  height[r] >= r_max:\
                    r_max = height[r]\
                \cf6 \strokec6 else\cf4 \strokec4 :\
                    ans += r_max - height[r]\
                r -= \cf7 \strokec7 1\cf4 \strokec4 \
        \cf6 \strokec6 return\cf4 \strokec4  ans\
}