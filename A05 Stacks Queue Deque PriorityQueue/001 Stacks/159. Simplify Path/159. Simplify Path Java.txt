###################################
Runtime: 5 ms, faster than 54.39% of Java online submissions for Simplify Path.
Memory Usage: 38.9 MB, less than 88.13% of Java online submissions for Simplify Path.

Use [] to store data after split(/)

############################
Runtime: 3 ms, faster than 96.36% of Java online submissions for Simplify Path.
Memory Usage: 38.8 MB, less than 94.74% of Java online submissions for Simplify Path.
########################
class Solution {
    public String simplifyPath(String path) {
        Deque<String> stack = new LinkedList<>();
        for(String s: path.split("/")){
            if(s.equals("..") ) stack.poll();
            else if(!s.equals("") && !s.equals(".")) stack.push(s);
        }
        StringBuilder sb = new StringBuilder();
        if(stack.size() == 0) return "/";
        while(stack.size() != 0) sb.append("/").append(stack.pollLast());
        return sb.toString();
    }
}



###################################
class Solution {
public String simplifyPath(String path) {
        String[] dirs = path.split("/");
        Deque<String> stack = new ArrayDeque<>();
        for(String s: dirs) {
            if(s.equals("")) continue;
            if(s.equals(".")) continue;
            if(s.equals("..")) stack.pollLast();			//because it is array, it is polllast
            else stack.add(s);
        }
        return "/" + String.join("/", stack);					//because Deque is created by Array, it can just use join with out stringbuilder 
}
}


####################################
Runtime: 9 ms, faster than 25.46% of Java online submissions for Simplify Path.
Memory Usage: 39.3 MB, less than 43.16% of Java online submissions for Simplify Path.

Use Hashset<> to store special case 
use Stack is created by Linkedlist
####################################
class Solution {
public String simplifyPath(String path) {
    Deque<String> stack = new LinkedList<>();
    Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
    for (String dir : path.split("/")) {
        if (dir.equals("..") && !stack.isEmpty()) stack.pop();
        else if (!skip.contains(dir)) stack.push(dir);
    }
    String res = "";
    for (String dir : stack) res = "/" + dir + res;
    return res.isEmpty() ? "/" : res;
}
}

