public class Solution {
    public int longestValidParentheses(String s) {
        LinkedList<Integer> stack = new LinkedList<>();
        int result = 0;
        stack.push(-1);
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ')' && stack.size() > 1 && s.charAt(stack.peek()) == '(') {
                stack.pop();
                result = Math.max(result, i - stack.peek());
            } else {
                stack.push(i);
            }
        }
        return result;
    }
}

#################
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        
        stk=[-1]
        mx =0
        
        for ix, c in enumerate(s):
            if c =='(':
                stk.append(ix)
            if c ==')':
                stk.pop()
                if not stk:
                    stk.append(ix)
                mx = max(mx, ix -stk[-1])
        
        return mx