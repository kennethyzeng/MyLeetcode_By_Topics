#############################
? seem this solution didn't work since it seems that it didn't didn't push at second repeated character. what is feature of ArrayDeque

Also, this method is slow even it work. it used  many for loop 
#############################
class Solution {
    public String removeDuplicates(String S, int k) {
        Deque<Character> charStk = new ArrayDeque<>();
        Deque<Integer> cntStk = new ArrayDeque<>();
        for (int i = 0; i < S.length(); ++i) {
            char c = S.charAt(i);
            if (charStk.isEmpty() || charStk.peek() != c) { // no char in stack yet, or top char is different from the current.
                charStk.push(c);
                cntStk.push(1);
            }else if (cntStk.peek() + 1 < k) { // top char is same as the current, but less than k after appending the current.
                cntStk.push(cntStk.pop() + 1);
            }else { // found k-in-a-row duplicates, remove them.
                charStk.pop();
                cntStk.pop();
            }
        }
        StringBuilder sb = new StringBuilder();
        for (char c : charStk) {
            int cnt = cntStk.pop();
            while (cnt-- > 0) {
                sb.append(c);
            }
        }
        return sb.reverse().toString(); // Do NOT forget reverse().
    }
}

#############################################
class Solution {
    public String removeDuplicates(String s, int k) {
        char[] c = s.toCharArray();
        int[] count = new int[s.length()];
        int i = 0;
        for (int j=0; j<c.length; j++, i++) {
            c[i] = c[j];
            if (i == 0 || c[i] != c[i-1]) count[i] = 1;
            else {
                count[i] = count[i-1] + 1;
                if (count[i] == k) i -= k;
            }
        }
        return new String(c, 0, i);
    }
}

###################################
w/ Recursion:
The best result for the code below is 2ms / 39.2MB (beats 99% / 62%).

class Solution {
    public String removeDuplicates(String S, int K) {
        for (int i = 1, count = 1; i < S.length(); i++) {
            count = S.charAt(i) == S.charAt(i-1) ? count + 1 : 1;
            if (count == K) 
                S = removeDuplicates(S.substring(0, i-K+1) + S.substring(i+1), K);
        }
        return S;
    }
}


###################################
w/ In-Place Stack:
The best result for the code below is 5ms / 38.6MB (beats 86% / 99%).

class Solution {
    public String removeDuplicates(String S, int K) {
        char[] SC = S.toCharArray();
        int i, j;
        Stack<Integer> st = new Stack<>();
        st.add(0);
        for (i = 1, j = 1; j < S.length(); i++, j++) {
            char chr = SC[i] = SC[j];
            if (i == 0 || chr != SC[i-1]) st.add(i);
            else if (i - st.peek() + 1 == K) i = st.pop() - 1;
        }
        return new String(SC, 0, i);
    }
}