{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue255;\red29\green38\blue42;
\red245\green247\blue249;\red20\green0\blue196;\red73\green17\blue135;\red151\green0\blue126;\red12\green90\blue1;
}
{\*\expandedcolortbl;;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;\cssrgb\c14902\c19608\c21961;
\cssrgb\c96863\c97647\c98039;\cssrgb\c10980\c0\c81176;\cssrgb\c36078\c14902\c60000;\cssrgb\c66667\c5098\c56863;\cssrgb\c0\c41569\c0;
}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sliding window
\f1\b0 \cb1 \uc0\u8232 \cb3 We use a dictionary to store the character as the key, the last appear index has been seen so far as value.\cb1 \uc0\u8232 \cb3 seen[charactor] = index\
\
move the pointer when you met a repeated character in your window.\
\
\pard\pardeftab720\sl416\partightenfactor0

\f2\fs26 \cf4 \cb5 \strokec4 indext    \cf6 \strokec6 0\cf4 \strokec4     \cf6 \strokec6 1\cf4 \strokec4     \cf6 \strokec6 2\cf4 \strokec4     \cf6 \strokec6 3\cf4 \strokec4    \cf6 \strokec6 4\cf4 \strokec4    \cf6 \strokec6 5\cf4 \strokec4    \cf6 \strokec6 6\cf4 \strokec4    \cf6 \strokec6 7\cf4 \strokec4 \
string    a    \cf7 \strokec7 c\cf4 \strokec4     b    d   b   a   \cf7 \strokec7 c\cf4 \strokec4    d\
          ^                  ^\
          |                  |\
		\cf8 \strokec8 left\cf4 \strokec4                \cf8 \strokec8 right\cf4 \strokec4 \
		seen = \{a : \cf6 \strokec6 0\cf4 \strokec4 , \cf7 \strokec7 c\cf4 \strokec4  : \cf6 \strokec6 1\cf4 \strokec4 , b : \cf6 \strokec6 2\cf4 \strokec4 , d: \cf6 \strokec6 3\cf4 \strokec4 \} \
		# \cf8 \strokec8 case\cf4 \strokec4  \cf6 \strokec6 1\cf4 \strokec4 : seen[b] = \cf6 \strokec6 2\cf4 \strokec4 , current window  \cf8 \strokec8 is\cf4 \strokec4  s[\cf6 \strokec6 0\cf4 \strokec4 :\cf6 \strokec6 4\cf4 \strokec4 ] , \
		#        b \cf8 \strokec8 is\cf4 \strokec4  inside current window, seen[b] = \cf6 \strokec6 2\cf4 \strokec4  > \cf8 \strokec8 left\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 . \cf7 \strokec7 Move\cf4 \strokec4  \cf8 \strokec8 left\cf4 \strokec4  pointer to seen[b] + \cf6 \strokec6 1\cf4 \strokec4  = \cf6 \strokec6 3\cf4 \strokec4 \
		seen = \{a : \cf6 \strokec6 0\cf4 \strokec4 , \cf7 \strokec7 c\cf4 \strokec4  : \cf6 \strokec6 1\cf4 \strokec4 , b : \cf6 \strokec6 4\cf4 \strokec4 , d: \cf6 \strokec6 3\cf4 \strokec4 \} \
indext    \cf6 \strokec6 0\cf4 \strokec4     \cf6 \strokec6 1\cf4 \strokec4     \cf6 \strokec6 2\cf4 \strokec4     \cf6 \strokec6 3\cf4 \strokec4    \cf6 \strokec6 4\cf4 \strokec4    \cf6 \strokec6 5\cf4 \strokec4    \cf6 \strokec6 6\cf4 \strokec4    \cf6 \strokec6 7\cf4 \strokec4 \
string    a    \cf7 \strokec7 c\cf4 \strokec4     b    d   b   a   \cf7 \strokec7 c\cf4 \strokec4    d\
						 ^   ^\
					     |   |\
				      \cf8 \strokec8 left\cf4 \strokec4   \cf8 \strokec8 right\cf4 \strokec4 		\
indext    \cf6 \strokec6 0\cf4 \strokec4     \cf6 \strokec6 1\cf4 \strokec4     \cf6 \strokec6 2\cf4 \strokec4     \cf6 \strokec6 3\cf4 \strokec4    \cf6 \strokec6 4\cf4 \strokec4    \cf6 \strokec6 5\cf4 \strokec4    \cf6 \strokec6 6\cf4 \strokec4    \cf6 \strokec6 7\cf4 \strokec4 \
string    a    \cf7 \strokec7 c\cf4 \strokec4     b    d   b   a   \cf7 \strokec7 c\cf4 \strokec4    d\
					     ^       ^\
					     |       |\
				       \cf8 \strokec8 left\cf4 \strokec4     \cf8 \strokec8 right\cf4 \strokec4 		\
		# \cf8 \strokec8 case\cf4 \strokec4  \cf6 \strokec6 2\cf4 \strokec4 : seen[a] = \cf6 \strokec6 0\cf4 \strokec4 ,which means a not \cf8 \strokec8 in\cf4 \strokec4  current window s[\cf6 \strokec6 3\cf4 \strokec4 :\cf6 \strokec6 5\cf4 \strokec4 ] , since seen[a] = \cf6 \strokec6 0\cf4 \strokec4  < \cf8 \strokec8 left\cf4 \strokec4  = \cf6 \strokec6 3\cf4 \strokec4  \
		# we can keep moving \cf8 \strokec8 right\cf4 \strokec4  pointer.\
\
\
##################\
https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/1014921/SLIDING-WINDOW-oror-O(n)-oror-Faster-than-90-and-Memory-usage-less-than-100\
\
\pard\pardeftab720\sl416\partightenfactor0
\cf8 \strokec8 class\cf4 \strokec4  \cf7 \strokec7 Solution\cf4 \strokec4  \{\
\cf8 \strokec8 public\cf4 \strokec4 :\
    \cf8 \strokec8 int\cf4 \strokec4  \cf6 \strokec6 lengthOfLongestSubstring\cf7 \strokec7 (string s)\cf4 \strokec4  \{\
        \
        \cf9 \strokec9 //SLIDING WINDOW  - TIME COMPLEXITY O(2n)\cf4 \strokec4 \
        \cf9 \strokec9 //                  SPACE COMPLEXITY O(m)   //size of array\cf4 \strokec4 \
        \
        \cf8 \strokec8 int\cf4 \strokec4  store[\cf6 \strokec6 256\cf4 \strokec4 ]=\{\cf6 \strokec6 0\cf4 \strokec4 \}; \cf9 \strokec9 //array to store the occurences of all the characters\cf4 \strokec4 \
        \cf8 \strokec8 int\cf4 \strokec4  l=\cf6 \strokec6 0\cf4 \strokec4 ;    \cf9 \strokec9 //left pointer\cf4 \strokec4 \
        \cf8 \strokec8 int\cf4 \strokec4  r=\cf6 \strokec6 0\cf4 \strokec4 ;    \cf9 \strokec9 //right pointer\cf4 \strokec4 \
        \cf8 \strokec8 int\cf4 \strokec4  ans=\cf6 \strokec6 0\cf4 \strokec4 ;  \cf9 \strokec9 //initializing the required length as 0\cf4 \strokec4 \
        \
        \cf8 \strokec8 while\cf4 \strokec4 (r<s.length())     \cf9 \strokec9 //iterate over the string till the right pointer reaches the end of the string \cf4 \strokec4 \
        \{\
            store[s[r]]++;      \cf9 \strokec9 //increment the count of the character present in the right pointer \cf4 \strokec4 \
            \
            \cf8 \strokec8 while\cf4 \strokec4 (store[s[r]]>\cf6 \strokec6 1\cf4 \strokec4 )    \cf9 \strokec9 //if the occurence become more than 1 means the char is repeated\cf4 \strokec4 \
            \{ \
                store[s[l]]--;   \cf9 \strokec9 //reduce the occurence of temp as it might be present ahead also in the string\cf4 \strokec4 \
                l++;         \cf9 \strokec9 //contraction of the present window till the occurence of the 't' char becomes 1\cf4 \strokec4 \
            \}\
            \
            ans = max(ans,r-l+\cf6 \strokec6 1\cf4 \strokec4 );    \cf9 \strokec9 //As the index starts from 0 , ans will be (right pointer-left pointer + 1)\cf4 \strokec4 \
            r++;        \cf9 \strokec9 // now will increment the right pointer \cf4 \strokec4 \
        \}\
        \cf8 \strokec8 return\cf4 \strokec4  ans;\
    \}\
\};\
\pard\pardeftab720\sl416\partightenfactor0
\cf4 \
}