{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red12\green90\blue1;\red245\green247\blue249;\red29\green38\blue42;
\red151\green0\blue126;\red20\green0\blue196;\red73\green17\blue135;}
{\*\expandedcolortbl;;\cssrgb\c0\c41569\c0;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;
\cssrgb\c66667\c5098\c56863;\cssrgb\c10980\c0\c81176;\cssrgb\c36078\c14902\c60000;}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\deftab720
\pard\pardeftab720\sl416\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # [3,  10,   5,   25,    2,   8]\cf4 \strokec4 \
\cf2 \strokec2 # [11, 110,  101, 11001, 10,  1000]\cf4 \strokec4 \
\
\pard\pardeftab720\sl416\partightenfactor0
\cf5 \strokec5 def\cf4 \strokec4  \cf6 \strokec6 findMaximumXOR\cf4 \strokec4 (\cf7 \strokec7 self, nums: List[int]\cf4 \strokec4 ) -> int:\
    ans = \cf6 \strokec6 0\cf4 \strokec4 \
    \cf5 \strokec5 for\cf4 \strokec4  i \cf5 \strokec5 in\cf4 \strokec4  \cf7 \strokec7 range\cf4 \strokec4 (\cf6 \strokec6 31\cf4 \strokec4 ,-\cf6 \strokec6 1\cf4 \strokec4 ,-\cf6 \strokec6 1\cf4 \strokec4 ):\
        prefixs = \cf7 \strokec7 set\cf4 \strokec4 ([num>>i \cf5 \strokec5 for\cf4 \strokec4  num \cf5 \strokec5 in\cf4 \strokec4  nums])\
        \cf2 \strokec2 #to get the first i digits of the num. In the given example [3, 10, 5, 25, 2, 8], \cf4 \strokec4 \
        \cf2 \strokec2 #since the largest number 25 is 11001 in binary, thus while i>=5, the prefix = \{0\}, ignoring all preceding '0'\cf4 \strokec4 \
        \cf2 \strokec2 #prefix =\{0,1\} when i ==4, \cf4 \strokec4 \
        \cf2 \strokec2 #prefix =\{00,01,11\} when i ==3, etc.\cf4 \strokec4 \
        \
        ans <<=\cf6 \strokec6 1\cf4 \strokec4  \cf2 \strokec2 # 0 -> 00  1 ->10\cf4 \strokec4 \
        candidate = ans+\cf6 \strokec6 1\cf4 \strokec4  \cf2 \strokec2 # 0->01 1->11\cf4 \strokec4 \
        \cf2 \strokec2 #so ans and candidate basically gives two options (0 or 1) on every new digit added\cf4 \strokec4 \
        \cf2 \strokec2 #and candidate is the largest possible number given the length of the digit. It's sort of a greedy algorithm here.\cf4 \strokec4 \
        \cf2 \strokec2 #if previous ans == 1, then the new ans and candidate will be 10 and 11\cf4 \strokec4 \
        \cf2 \strokec2 #depands on if we could get 1 on the new digit, we choose if we move forward with ans(10) or candidate(11)\cf4 \strokec4 \
        \
        \cf5 \strokec5 for\cf4 \strokec4  pre \cf5 \strokec5 in\cf4 \strokec4  prefixs:\
            \cf5 \strokec5 if\cf4 \strokec4  candidate ^ pre \cf5 \strokec5 in\cf4 \strokec4  prefixs:\
                ans = candidate\
                \cf5 \strokec5 break\cf4 \strokec4 \
        \cf2 \strokec2 # the if condition pre^candidate in prefix is based on the fact a^b^a = b\cf4 \strokec4 \
        \cf2 \strokec2 # assume a, b in prefix could generate the largest possilbe xor resuglt "candidate". then if we use candidate^a, the result will be b\cf4 \strokec4 \
        \cf2 \strokec2 # so if we do find pre^candidate in prefix, candidate will move forward(ans = candidate), meaning we get 1 in the new digit\cf4 \strokec4 \
        \
    \cf5 \strokec5 return\cf4 \strokec4  ans\
}