{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red151\green0\blue126;\red245\green247\blue249;\red29\green38\blue42;
\red73\green17\blue135;\red12\green90\blue1;\red20\green0\blue196;}
{\*\expandedcolortbl;;\cssrgb\c66667\c5098\c56863;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;
\cssrgb\c36078\c14902\c60000;\cssrgb\c0\c41569\c0;\cssrgb\c10980\c0\c81176;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\fs22 \cf0 ###############################Link###########################################\
https://www.youtube.com/watch?v=EzQ_YEmR598\
################################Approach######################################\
###############################Algorithms######################################\
\
################################Other###########################################\
\pard\pardeftab720\sl416\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Solution\cf4 \strokec4  \{\
    \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 boolean\cf4 \strokec4  isInterleave(\cf2 \strokec2 String\cf4 \strokec4  s1, \cf2 \strokec2 String\cf4 \strokec4  s2, \cf2 \strokec2 String\cf4 \strokec4  s3) \{\
        \cf2 \strokec2 int\cf4 \strokec4  len1 = s1.length(); \cf2 \strokec2 int\cf4 \strokec4  len2 = s2.length(); \cf2 \strokec2 int\cf4 \strokec4  len3 = s3.length();\
        \cf6 \strokec6 // If simply adding length do not match len3, then there is no way we can forms\cf4 \strokec4 \
        \cf6 \strokec6 // s3 by interleaving chars in s1,s2\cf4 \strokec4 \
        \cf2 \strokec2 if\cf4 \strokec4 (len1 + len2 != len3) \{\
            \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 false\cf4 \strokec4 ;\
        \}\
        \
        \cf6 \strokec6 /*\
        dp[i][j] -> true if s1[0..i-1] and s2[0..j-1] interleaves s3[0..i+j-1]\
        */\cf4 \strokec4 \
        \cf2 \strokec2 boolean\cf4 \strokec4 [][] dp = \cf2 \strokec2 new\cf4 \strokec4  \cf2 \strokec2 boolean\cf4 \strokec4 [len1+\cf7 \strokec7 1\cf4 \strokec4 ][len2+\cf7 \strokec7 1\cf4 \strokec4 ];\
        \
        \cf6 \strokec6 /*\
        EMPTY s1,s2 can surely interleave to form EMPTY s3\
        */\cf4 \strokec4 \
        dp[\cf7 \strokec7 0\cf4 \strokec4 ][\cf7 \strokec7 0\cf4 \strokec4 ] = \cf2 \strokec2 true\cf4 \strokec4 ;\
        \
        \cf6 \strokec6 /*\
        If S2 is empty, then just check whether char in s1 matches with that of s3\
        
\f2\b Note:
\f1\b0  j == 0 here.\
        */\cf4 \strokec4 \
        \cf2 \strokec2 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i = \cf7 \strokec7 1\cf4 \strokec4 ;i<=len1;i++) \{\
            dp[i][\cf7 \strokec7 0\cf4 \strokec4 ] = dp[i\cf7 \strokec7 -1\cf4 \strokec4 ][\cf7 \strokec7 0\cf4 \strokec4 ] && s3.charAt(i\cf7 \strokec7 -1\cf4 \strokec4 ) == s1.charAt(i\cf7 \strokec7 -1\cf4 \strokec4 );\
        \}\
        \
        \cf6 \strokec6 /*\
        If S1 is empty, then just check whether char in s2 matches with that of s3\
        
\f2\b Note:
\f1\b0  i == 0 here.\
        */\cf4 \strokec4 \
        \cf2 \strokec2 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  j = \cf7 \strokec7 1\cf4 \strokec4 ;j<=len2;j++) \{\
            dp[\cf7 \strokec7 0\cf4 \strokec4 ][j] = dp[\cf7 \strokec7 0\cf4 \strokec4 ][j\cf7 \strokec7 -1\cf4 \strokec4 ] && s3.charAt(j\cf7 \strokec7 -1\cf4 \strokec4 ) == s2.charAt(j\cf7 \strokec7 -1\cf4 \strokec4 );\
        \}\
        \
        \cf6 \strokec6 /*\
        Now check for both s1,s2 being non empty\
        */\cf4 \strokec4 \
        \cf2 \strokec2 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i = \cf7 \strokec7 1\cf4 \strokec4 ; i<=len1; i++) \{\
            \cf2 \strokec2 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  j = \cf7 \strokec7 1\cf4 \strokec4 ; j<=len2; j++) \{\
                \cf6 \strokec6 // Characters to be compared\cf4 \strokec4 \
                \cf2 \strokec2 int\cf4 \strokec4  c1 = s1.charAt(i - \cf7 \strokec7 1\cf4 \strokec4 );\
                \cf2 \strokec2 int\cf4 \strokec4  c2 = s2.charAt(j - \cf7 \strokec7 1\cf4 \strokec4 );\
                \cf2 \strokec2 int\cf4 \strokec4  c3 = s3.charAt(i + j - \cf7 \strokec7 1\cf4 \strokec4 );\
                \
                \cf6 \strokec6 // If c3 matches c1, then is every char before c1 in s1 valid?\cf4 \strokec4 \
                \cf6 \strokec6 // If c3 matches c2, then is every char before c2 in s2 valid?\cf4 \strokec4 \
                dp[i][j] = (c1 == c3 && dp[i\cf7 \strokec7 -1\cf4 \strokec4 ][j]) || (c2 == c3 && dp[i][j\cf7 \strokec7 -1\cf4 \strokec4 ]);\
            \}\
        \}\
        \
        \cf2 \strokec2 return\cf4 \strokec4  dp[len1][len2];\
    \}\
\}\
}