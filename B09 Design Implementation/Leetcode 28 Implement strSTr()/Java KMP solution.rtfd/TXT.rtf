{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue255;\red151\green0\blue126;
\red245\green247\blue249;\red29\green38\blue42;\red73\green17\blue135;\red20\green0\blue196;\red12\green90\blue1;
\red67\green91\blue103;}
{\*\expandedcolortbl;;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;\cssrgb\c66667\c5098\c56863;
\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;\cssrgb\c0\c41569\c0;
\cssrgb\c32941\c43137\c47843;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww25700\viewh13880\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Compute KMP Table:
\f1\b0 \'a0LPS which is Longest Prefix also Suffix\cb1 \uc0\u8232 \cb3 Example 1:\
\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa280\partightenfactor0
\cf2 \cb3 Example 2:\cb1 \uc0\u8232 \cb3 \
\

\f0\b Version 1: Easy to understand
\f1\b0 \
\
\pard\pardeftab720\sl416\partightenfactor0

\f2\fs26 \cf4 \cb5 class\cf6  \cf7 Solution\cf6  \{\
    \cf4 public\cf6  \cf4 int\cf6  \cf8 strStr\cf7 (String haystack, String needle)\cf6  \{\
        \cf4 if\cf6  (needle.isEmpty()) \cf4 return\cf6  \cf8 0\cf6 ;\
        \cf4 int\cf6 [] lps = computeKMPTable(needle);\
        \cf4 int\cf6  i = \cf8 0\cf6 , j = \cf8 0\cf6 , n = haystack.length(), m = needle.length();\
        \cf4 while\cf6  (i < n) \{\
            \cf4 if\cf6  (haystack.charAt(i) == needle.charAt(j)) \{\
                ++i; ++j;\
                \cf4 if\cf6  (j == m) \cf4 return\cf6  i - m; \cf9 // found solution\cf6 \
            \} \cf4 else\cf6  \{\
                \cf4 if\cf6  (j != \cf8 0\cf6 ) j = lps[j - \cf8 1\cf6 ]; \cf9 // try match with longest prefix suffix\cf6 \
                \cf4 else\cf6  i++; \cf9 // don't match -> go to next character of `haystack` string\cf6 \
            \}\
        \}\
        \cf4 return\cf6  -\cf8 1\cf6 ;\
    \}\
    \cf4 private\cf6  \cf4 int\cf6 [] computeKMPTable(String pattern) \{\
        \cf4 int\cf6  i = \cf8 1\cf6 , j = \cf8 0\cf6 , n = pattern.length();\
        \cf4 int\cf6 [] lps = \cf4 new\cf6  \cf4 int\cf6 [n];\
        \cf4 while\cf6  (i < n) \{\
            \cf4 if\cf6  (pattern.charAt(i) == pattern.charAt(j)) \{\
                lps[i++] = ++j;\
            \} \cf4 else\cf6  \{\
                \cf4 if\cf6  (j != \cf8 0\cf6 ) j = lps[j - \cf8 1\cf6 ]; \cf9 // try match with longest prefix suffix\cf6 \
                \cf4 else\cf6  i++; \cf9 // don't match -> go to next character\cf6 \
            \}\
        \}\
        \cf4 return\cf6  lps;\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f1\fs28 \cf2 \cb3 \

\f0\b Version 2: Shorter
\f1\b0 \
\
\pard\pardeftab720\sl416\partightenfactor0

\f2\fs26 \cf4 \cb5 class\cf6  \cf7 Solution\cf6  \{\
    \cf4 public\cf6  \cf4 int\cf6  \cf8 strStr\cf7 (String haystack, String needle)\cf6  \{\
        \cf4 if\cf6  (needle.isEmpty()) \cf4 return\cf6  \cf8 0\cf6 ;\
        \cf4 int\cf6 [] lps = computeKMPTable(needle);\
        \cf4 int\cf6  n = haystack.length(), m = needle.length();\
        \cf4 for\cf6  (\cf4 int\cf6  i = \cf8 0\cf6 , j = \cf8 0\cf6 ; i < n; i++) \{\
            \cf4 while\cf6  (j > \cf8 0\cf6  && haystack.charAt(i) != needle.charAt(j)) j = lps[j - \cf8 1\cf6 ];\
            \cf4 if\cf6  (haystack.charAt(i) == needle.charAt(j)) \{\
                \cf4 if\cf6  (++j == m) \cf4 return\cf6  i - m + \cf8 1\cf6 ; \cf9 // found solution\cf6 \
            \}\
        \}\
        \cf4 return\cf6  -\cf8 1\cf6 ;\
    \}\
    \cf4 private\cf6  \cf4 int\cf6 [] computeKMPTable(String pattern) \{\
        \cf4 int\cf6  n = pattern.length();\
        \cf4 int\cf6 [] lps = \cf4 new\cf6  \cf4 int\cf6 [n];\
        \cf4 for\cf6  (\cf4 int\cf6  i = \cf8 1\cf6 , j = \cf8 0\cf6 ; i < n; i++) \{\
            \cf4 while\cf6  (j > \cf8 0\cf6  && pattern.charAt(i) != pattern.charAt(j)) j = lps[j - \cf8 1\cf6 ];\
            \cf4 if\cf6  (pattern.charAt(i) == pattern.charAt(j)) lps[i] = ++j;\
        \}\
        \cf4 return\cf6  lps;\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f1\fs28 \cf2 \cb3 \
Complexity:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Time:\'a0
\f3\fs26 \cf10 \cb5 O(m+n)
\f1\fs28 \cf2 \cb3 , where\'a0
\f3\fs26 \cf10 \cb5 m
\f1\fs28 \cf2 \cb3 \'a0is needle.length,\'a0
\f3\fs26 \cf10 \cb5 n
\f1\fs28 \cf2 \cb3 \'a0is haystack.length\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Space:\'a0
\f3\fs26 \cf10 \cb5 O(m)
\f1\fs28 \cf2 \cb1 \
}