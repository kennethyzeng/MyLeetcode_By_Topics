{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue255;\red67\green91\blue103;
\red245\green247\blue249;\red151\green0\blue126;\red29\green38\blue42;\red73\green17\blue135;\red20\green0\blue196;
}
{\*\expandedcolortbl;;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;\cssrgb\c32941\c43137\c47843;
\cssrgb\c96863\c97647\c98039;\cssrgb\c66667\c5098\c56863;\cssrgb\c14902\c19608\c21961;\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
https://leetcode.com/problems/fibonacci-number/discuss/223199/Java-O(2N)-greater-O(N)-greater-O(logN)\
\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Solution 1: Iterative
\f2\b0 \
\
Time complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb1 \uc0\u8232 \cb3 Space complexity:\'a0
\f3\fs26 \cf4 \cb5 O(1)
\f2\fs28 \cf2 \cb3 \
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf6 \cb5 class\cf7  \cf8 Solution\cf7  \
\{\
    \cf6 public\cf7  \cf6 int\cf7  \cf9 fib\cf8 (\cf6 int\cf8  N)\cf7 \
    \{\
        \cf6 if\cf7 (N <= \cf9 1\cf7 )\
            \cf6 return\cf7  N;\
        \
		\cf6 int\cf7  a = \cf9 0\cf7 , b = \cf9 1\cf7 ;\
		\
		\cf6 while\cf7 (N-- > \cf9 1\cf7 )\
		\{\
			\cf6 int\cf7  sum = a + b;\
			a = b;\
			b = sum;\
		\}\
        \cf6 return\cf7  b;\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f2\fs28 \cf2 \cb3 \

\f1\b Solution 2: Recursive
\f2\b0 \
\
Time complexity:\'a0
\f3\fs26 \cf4 \cb5 O(2^n)
\f2\fs28 \cf2 \cb3 - since\'a0
\f3\fs26 \cf4 \cb5 T(n) = T(n-1) + T(n-2)
\f2\fs28 \cf2 \cb3 is an exponential time\cb1 \uc0\u8232 \cb3 Space complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb3 \'a0- space for recursive function call stack\
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf6 \cb5 class\cf7  \cf8 Solution\cf7  \
\{\
    \cf6 public\cf7  \cf6 int\cf7  \cf9 fib\cf8 (\cf6 int\cf8  N)\cf7 \
    \{\
        \cf6 if\cf7 (N <= \cf9 1\cf7 )\
            \cf6 return\cf7  N;\
        \cf6 else\cf7 \
            \cf6 return\cf7  fib(N - \cf9 1\cf7 ) + fib(N - \cf9 2\cf7 );\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f2\fs28 \cf2 \cb3 \

\f1\b Solution 3: Dynamic Programming - Top Down Approach
\f2\b0 \
\
Time complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb1 \uc0\u8232 \cb3 Space complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb3 \
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf6 \cb5 class\cf7  \cf8 Solution\cf7  \
\{\
    \cf6 int\cf7 [] fib_cache = \cf6 new\cf7  \cf6 int\cf7 [\cf9 31\cf7 ];\
	\
	\cf6 public\cf7  \cf6 int\cf7  \cf9 fib\cf8 (\cf6 int\cf8  N)\cf7 \
    \{\
        \cf6 if\cf7 (N <= \cf9 1\cf7 )\
            \cf6 return\cf7  N;\
        \cf6 else\cf7  \cf6 if\cf7 (fib_cache[N] != \cf9 0\cf7 )\
            \cf6 return\cf7  fib_cache[N];\
		\cf6 else\cf7  \
            \cf6 return\cf7  fib_cache[N] = fib(N - \cf9 1\cf7 ) + fib(N - \cf9 2\cf7 );\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f2\fs28 \cf2 \cb3 \

\f1\b Solution 4: Dynamic Programming - Bottom Up Approach
\f2\b0 \
\
Time complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb1 \uc0\u8232 \cb3 Space complexity:\'a0
\f3\fs26 \cf4 \cb5 O(n)
\f2\fs28 \cf2 \cb3 \
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf6 \cb5 class\cf7  \cf8 Solution\cf7  \
\{\
    \cf6 public\cf7  \cf6 int\cf7  \cf9 fib\cf8 (\cf6 int\cf8  N)\cf7 \
    \{\
        \cf6 if\cf7 (N <= \cf9 1\cf7 )\
            \cf6 return\cf7  N;\
\
		\cf6 int\cf7 [] fib_cache = \cf6 new\cf7  \cf6 int\cf7 [N + \cf9 1\cf7 ];\
		fib_cache[\cf9 1\cf7 ] = \cf9 1\cf7 ;\
\
		\cf6 for\cf7 (\cf6 int\cf7  i = \cf9 2\cf7 ; i <= N; i++)\
		\{\
			fib_cache[i] = fib_cache[i - \cf9 1\cf7 ] + fib_cache[i - \cf9 2\cf7 ];\
		\}\
		\cf6 return\cf7  fib_cache[N];\
    \}\
\}\
}