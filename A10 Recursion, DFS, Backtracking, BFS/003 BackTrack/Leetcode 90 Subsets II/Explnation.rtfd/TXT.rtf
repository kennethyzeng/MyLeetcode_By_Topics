{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Medium;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 STIXGeneral-Regular;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red78\green106\blue120;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue0;\red78\green106\blue120;\red101\green125\blue138;\red24\green121\blue255;\red242\green242\blue242;
\red140\green140\blue140;\red51\green51\blue51;\red126\green147\blue158;\red175\green175\blue175;\red29\green38\blue42;
\red245\green247\blue249;\red151\green0\blue126;\red73\green17\blue135;\red20\green0\blue196;\red12\green90\blue1;
\red231\green235\blue237;}
{\*\expandedcolortbl;;\cssrgb\c37647\c49020\c54510;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c85098;
\cssrgb\c0\c0\c0\c65098;\cssrgb\c37647\c49020\c54510;\cssrgb\c47059\c56471\c61176;\cssrgb\c9412\c56471\c100000;\cssrgb\c96078\c96078\c96078;
\cssrgb\c61961\c61961\c61961;\cssrgb\c25882\c25882\c25882;\cssrgb\c56471\c64314\c68235;\cssrgb\c74118\c74118\c74118;\cssrgb\c14902\c19608\c21961;
\cssrgb\c96863\c97647\c98039;\cssrgb\c66667\c5098\c56863;\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;\cssrgb\c0\c41569\c0;
\cssrgb\c92549\c93725\c94510;}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
method 1: \
https://www.youtube.com/watch?v=lCvL8htQ1iI\
\
method 2: only watch diagram\
https://www.youtube.com/watch?v=mcg4qKbAmmY\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf4 \cb1 \outl0\strokewidth0 \strokec4 ython - 2 ways w/ Explnation\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf5 \strokec5 \
\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf6 \strokec6 \
\pard\pardeftab720\sl800\partightenfactor0

\f2\b \cf7 \strokec7 7\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf6 \strokec6 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode.com/noobie12"}}{\fldrslt 
\fs28 \cf8 \cb9 \strokec8 }}\pard\pardeftab720\partightenfactor0

\fs28 \cf8 \strokec8 \
\pard\pardeftab720\sl240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode.com/noobie12"}}{\fldrslt 
\fs24 \cf10 \strokec10 noobie12}}
\fs24 \cf11 \strokec11 \
\pard\pardeftab720\sl240\partightenfactor0
\cf12 \strokec12 \
155\
\pard\pardeftab720\ri200\partightenfactor0
\cf13 \strokec13 Last Edit: July 1, 2020 4:01 PM\
\pard\pardeftab720\qr\partightenfactor0
\cf13 316 VIEWS\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\f2\b\fs28 \cf11 \strokec11 IDEA 1:
\f0\b0 \'a0For every number in nums, we have the option to either include it or exclude it and proceed further. So, if we have 2 choices for each of the 
\f3 \uc0\u55349 \u56411 
\f0  elements, the total number of subsets possible is 2**n.\uc0\u8232 This method first builds the lists by including numbers and then backtracks to exclude them and proceed further.\
\
The output for the input [1,2,3] looks like:\
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf14 \cb15 \strokec14     level 0: []\
    level 1: [1]                    [2]                   [3]\
    level 2: [1,2]               [1,3]                [2,3] \
    level 3: [1,2,3]\
\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 \
Implementation:\
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf16 \cb15 \strokec16 class\cf14 \strokec14  \cf17 \strokec17 Solution\cf14 \strokec14 :\
    \cf16 \strokec16 def\cf14 \strokec14  \cf18 \strokec18 subsets\cf14 \strokec14 (\cf17 \strokec17 self, nums: List[int]\cf14 \strokec14 ) -> List[List[int]]:\
        result = []\
        self.gen_subsets(nums, \cf18 \strokec18 0\cf14 \strokec14 , [], result)\
        \cf16 \strokec16 return\cf14 \strokec14  result\
\
    \cf16 \strokec16 def\cf14 \strokec14  \cf18 \strokec18 gen_subsets\cf14 \strokec14 (\cf17 \strokec17 self, nums, curr_idx, curr, result\cf14 \strokec14 ):\
        result.append(\cf17 \strokec17 list\cf14 \strokec14 (curr))\
        \cf19 \strokec19 # Iterating over all the elements of the array\cf14 \strokec14 \
        \cf16 \strokec16 for\cf14 \strokec14  i \cf16 \strokec16 in\cf14 \strokec14  \cf17 \strokec17 range\cf14 \strokec14 (curr_idx, \cf17 \strokec17 len\cf14 \strokec14 (nums)):\
            \cf19 \strokec19 # Include\cf14 \strokec14 \
            curr.append(nums[i])\
            \cf19 \strokec19 # Simulate proceeding while including it\cf14 \strokec14 \
            self.gen_subsets(nums, i + \cf18 \strokec18 1\cf14 \strokec14 , curr, result)\
            \cf19 \strokec19 # Exclude\cf14 \strokec14 \
            curr.pop()\
\
\pard\pardeftab720\sl420\sa140\partightenfactor0

\f0\fs28 \cf11 \cb20 \strokec11 \
\pard\pardeftab720\sl420\sa280\partightenfactor0
\cf11 \cb1 \
\pard\pardeftab720\sl420\sa280\partightenfactor0

\f2\b \cf11 IDEA 2:
\f0\b0 \'a0Build the result list in a bottom-up manner. Here, we consider one number at a time and then keep building the rest of the list over it. This can be illustrated by the following example:\
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf14 \cb15 \strokec14 INPUT                                                      OUTPUT\
[\cf18 \strokec18 1\cf14 \strokec14 ]                                                       [[], [\cf18 \strokec18 1\cf14 \strokec14 ]]\
[\cf18 \strokec18 1,2\cf14 \strokec14 ]                                                 [[], [\cf18 \strokec18 1\cf14 \strokec14 ], [\cf18 \strokec18 2\cf14 \strokec14 ], [\cf18 \strokec18 1\cf14 \strokec14 ,\cf18 \strokec18 2\cf14 \strokec14 ]]\
[\cf18 \strokec18 1,2,3\cf14 \strokec14 ]                                     [[], [\cf18 \strokec18 1\cf14 \strokec14 ], [\cf18 \strokec18 2\cf14 \strokec14 ], [\cf18 \strokec18 1\cf14 \strokec14 ,\cf18 \strokec18 2\cf14 \strokec14 ], [\cf18 \strokec18 3\cf14 \strokec14 ], [\cf18 \strokec18 1\cf14 \strokec14 ,\cf18 \strokec18 3\cf14 \strokec14 ], [\cf18 \strokec18 2\cf14 \strokec14 ,\cf18 \strokec18 3\cf14 \strokec14 ], [\cf18 \strokec18 1\cf14 \strokec14 ,\cf18 \strokec18 2\cf14 \strokec14 ,\cf18 \strokec18 3\cf14 \strokec14 ]]\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 \
Here, we can see that when the input is [1,2], we have used the output for [1], as it is, and then added '2' to every list within the output to obtain the result for [1,2].\uc0\u8232 Similarly, for [1,2,3], we have used the output for [1,2], as it is, and then added '3' to every list within the output to obtain the result for [1,2,3].\
\
Thus, its like doubling the results with some modification.\uc0\u8232 A general pattern can be observed as:\u8232 
\f2\b Output for [1...k] = Output for [1...(k-1)] + Add k to every entry in Output for [1...(k-1)]
\f0\b0 \
\
Thus, the implementation:\
\
\pard\pardeftab720\sl400\partightenfactor0

\f4\fs26 \cf14 \cb15 \strokec14     \cf16 \strokec16 def\cf14 \strokec14  \cf18 \strokec18 subsets\cf14 \strokec14 (\cf17 \strokec17 self, nums: List[int]\cf14 \strokec14 ) -> List[List[int]]:\
        result = [[]]\
        \cf16 \strokec16 for\cf14 \strokec14  ele \cf16 \strokec16 in\cf14 \strokec14  nums:\
            result += [entry + [ele] \cf16 \strokec16 for\cf14 \strokec14  entry \cf16 \strokec16 in\cf14 \strokec14  result]\
        \cf16 \strokec16 return\cf14 \strokec14  result\
\pard\pardeftab720\sl420\sa280\partightenfactor0

\f0\fs28 \cf11 \cb1 \strokec11 \
\pard\pardeftab720\sl420\partightenfactor0
\cf11 If you found this helpful, please upvote and constructive criticism is always welcome! :)\uc0\u8232 Please feel free to comment if you've any doubts! :)\
}