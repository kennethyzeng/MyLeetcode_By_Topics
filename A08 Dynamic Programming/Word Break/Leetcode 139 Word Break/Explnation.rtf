{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red16\green60\blue192;\red255\green255\blue255;\red151\green0\blue126;
\red245\green247\blue249;\red29\green38\blue42;\red73\green17\blue135;\red20\green0\blue196;\red12\green90\blue1;
\red181\green0\blue19;}
{\*\expandedcolortbl;;\cssrgb\c6667\c33333\c80000;\cssrgb\c100000\c100000\c100000;\cssrgb\c66667\c5098\c56863;
\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;\cssrgb\c0\c41569\c0;
\cssrgb\c76863\c10196\c8627;}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 DP solution \
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://www.youtube.com/watch?v=VKiZ_RKEcS8&t=1s\cb1 \ulnone \
\cb3 \ul https://www.youtube.com/watch?v=H2EgWq-45CY\
\
\
DFS\
\
\
\
\pard\pardeftab720\sl416\partightenfactor0

\f2 \cf4 \cb5 \ulnone \strokec4 class\cf6 \strokec6  \cf7 \strokec7 Solution\cf6 \strokec6 :\
    \cf4 \strokec4 def\cf6 \strokec6  \cf8 \strokec8 wordBreak\cf6 \strokec6 (\cf7 \strokec7 self, s: str, wordDict: List[str]\cf6 \strokec6 ) -> bool:\
        \
        \cf9 \strokec9 # dictionary:\cf6 \strokec6 \
        \cf9 \strokec9 # key: start index of substring\cf6 \strokec6 \
        \cf9 \strokec9 # value: True if s[idx:] can be made from wordDict.\cf6 \strokec6 \
        substr_breakable_dict = \{\}\
        \
        \
        \cf4 \strokec4 if\cf6 \strokec6  \cf7 \strokec7 len\cf6 \strokec6 (\cf7 \strokec7 set\cf6 \strokec6 (s)) > \cf7 \strokec7 len\cf6 \strokec6 (\cf7 \strokec7 set\cf6 \strokec6 ( \cf10 \strokec10 ''\cf6 \strokec6 .join(wordDict) ) ):\
            \cf9 \strokec9 # Quick response on letter set\cf6 \strokec6 \
            \cf9 \strokec9 # If s has extra letters, which are not included in wordDict,\cf6 \strokec6 \
            \cf9 \strokec9 # Then, it is impossible to make s from wordDict\cf6 \strokec6 \
            \cf4 \strokec4 return\cf6 \strokec6  \cf4 \strokec4 False\cf6 \strokec6 \
        \
        \cf9 \strokec9 # -----------------------------------------------------\cf6 \strokec6 \
        \cf4 \strokec4 def\cf6 \strokec6  \cf8 \strokec8 helper\cf6 \strokec6 (\cf7 \strokec7 idx\cf6 \strokec6 ):\
            \
            \cf4 \strokec4 if\cf6 \strokec6  idx == \cf7 \strokec7 len\cf6 \strokec6 (s):\
                \
                \cf9 \strokec9 # We can make s from wordDict\cf6 \strokec6 \
                \cf4 \strokec4 return\cf6 \strokec6  \cf4 \strokec4 True\cf6 \strokec6 \
            \
            \
            \cf4 \strokec4 if\cf6 \strokec6  idx \cf4 \strokec4 in\cf6 \strokec6  substr_breakable_dict:\
                \
                \cf9 \strokec9 # Quick response by look up table\cf6 \strokec6 \
                \cf4 \strokec4 return\cf6 \strokec6  substr_breakable_dict[idx]\
            \
            \
            \cf9 \strokec9 # Keep sovling in DFS with memoization\cf6 \strokec6 \
            breakable = \cf4 \strokec4 False\cf6 \strokec6 \
            \cf4 \strokec4 for\cf6 \strokec6  prefix \cf4 \strokec4 in\cf6 \strokec6  wordDict:\
                \
                \cf4 \strokec4 if\cf6 \strokec6  s[idx:].startswith(prefix):\
                    \cf9 \strokec9 # current substring starts with prefix\cf6 \strokec6 \
                    \
                    \cf4 \strokec4 if\cf6 \strokec6  helper( idx+\cf7 \strokec7 len\cf6 \strokec6 (prefix) ):\
                        \cf9 \strokec9 # check remaining part\cf6 \strokec6 \
                        breakable = \cf4 \strokec4 True\cf6 \strokec6 \
                        \cf4 \strokec4 break\cf6 \strokec6 \
                \
            substr_breakable_dict[idx] = breakable\
            \cf4 \strokec4 return\cf6 \strokec6  breakable\
        \
        \cf9 \strokec9 # -----------------------------------------------------\cf6 \strokec6 \
        \cf4 \strokec4 return\cf6 \strokec6  helper(idx=\cf8 \strokec8 0\cf6 \strokec6 )\
}