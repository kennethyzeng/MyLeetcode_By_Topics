{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red245\green247\blue249;\red12\green90\blue1;
\red151\green0\blue126;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;\cssrgb\c0\c41569\c0;
\cssrgb\c66667\c5098\c56863;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\fs22 \cf0 ###############################Link###########################################\
https://www.youtube.com/watch?v=UkKBPGt5Nok\
https://leetcode.com/problems/linked-list-cycle-ii/discuss/1701055/JavaC%2B%2BPython-best-explanation-ever-happen's-for-this-problem\
################################Approach######################################\
###############################Algorithms######################################\
\
################################Other###########################################\
\pard\pardeftab720\sl416\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\{\
        \cf4 // Pointer's intialize at head of linkedlist\cf2 \
        ListNode slow = head;\
        ListNode fast = head;\
        \
        \cf5 while\cf2 (fast != \cf5 null\cf2  && fast.next != \cf5 null\cf2 )\{ \cf4 // running the loop until \cf2 \
            slow = slow.next; \cf4 // moving slow by 1\cf2 \
            fast = fast.next.next; \cf4 // moving fast by 2\cf2 \
            \cf5 if\cf2 (slow == fast)\{ \cf4 // if they meet\cf2 \
                slow = head; \cf4 // reset slow to head\cf2 \
                \cf5 while\cf2 (slow != fast)\{ \cf4 // run loop until again fast & slow don't collab\cf2 \
                    slow = slow.next; \cf4 // moving slow by 1\cf2 \
                    fast = fast.next; \cf4 // moving fast by 1 as well\cf2 \
                \}\
                \cf5 return\cf2  slow; \cf4 // Or return fast same thing, they will return the tail where cycle starts\cf2 \
            \}\
        \}\
        \cf5 return\cf2  \cf5 null\cf2 ; \cf4 // if there is no cycle, it will return null\cf2 \
}