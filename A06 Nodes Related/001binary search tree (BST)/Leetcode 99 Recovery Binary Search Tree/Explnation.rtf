{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red151\green0\blue126;\red245\green247\blue249;\red29\green38\blue42;
\red73\green17\blue135;\red12\green90\blue1;}
{\*\expandedcolortbl;;\cssrgb\c66667\c5098\c56863;\cssrgb\c96863\c97647\c98039;\cssrgb\c14902\c19608\c21961;
\cssrgb\c36078\c14902\c60000;\cssrgb\c0\c41569\c0;}
\margl1440\margr1440\vieww25100\viewh13280\viewkind0
\deftab720
\pard\pardeftab720\sl416\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
public\cf4  \cf2 class\cf4  \cf5 Solution\cf4  \{\
    \
    TreeNode firstElement = \cf2 null\cf4 ;\
    TreeNode secondElement = \cf2 null\cf4 ;\
    \cf6 // The reason for this initialization is to avoid null pointer exception in the first comparison when prevElement has not been initialized\cf4 \
    TreeNode prevElement = new TreeNode(Integer.MIN_VALUE);\
    \
    \cf2 public\cf4  void recoverTree(TreeNode root) \{\
        \
        \cf6 // In order traversal to find the two elements\cf4 \
        traverse(root);\
        \
        \cf6 // Swap the values of the two nodes\cf4 \
        int temp = firstElement.\cf2 val\cf4 ;\
        firstElement.\cf2 val\cf4  = secondElement.\cf2 val\cf4 ;\
        secondElement.\cf2 val\cf4  = temp;\
    \}\
    \
    \cf2 private\cf4  void traverse(TreeNode root) \{\
        \
        \cf2 if\cf4  (root == \cf2 null\cf4 )\
            \cf2 return\cf4 ;\
            \
        traverse(root.left);\
        \
        \cf6 // Start of "do some business", \cf4 \
        \cf6 // If first element has not been found, assign it to prevElement (refer to 6 in the example above)\cf4 \
        \cf2 if\cf4  (firstElement == \cf2 null\cf4  && prevElement.\cf2 val\cf4  >= root.\cf2 val\cf4 ) \{\
            firstElement = prevElement;\
        \}\
    \
        \cf6 // If first element is found, assign the second element to the root (refer to 2 in the example above)\cf4 \
        \cf2 if\cf4  (firstElement != \cf2 null\cf4  && prevElement.\cf2 val\cf4  >= root.\cf2 val\cf4 ) \{\
            secondElement = root;\
        \}        \
        prevElement = root;\
\
        \cf6 // End of "do some business"\cf4 \
\
        traverse(root.right);\
\}\
\
++++++++++++++++++++++++++++++++++morris Traversal+++++++++++++\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode() \{\}\
 *     TreeNode(int val) \{ this.val = val; \}\
 *     TreeNode(int val, TreeNode left, TreeNode right) \{\
 *         this.val = val;\
 *         this.left = left;\
 *         this.right = right;\
 *     \}\
 * \}\
 */\
class Solution \{\
    public void recoverTree(TreeNode root) \{\
        TreeNode pre = null;\
        TreeNode first = null, second = null;\
        // Morris Traversal\
        TreeNode temp = null;\
		while(root!=null)\{\
			if(root.left!=null)\{\
				// connect threading for root\
				temp = root.left;\
				while(temp.right!=null && temp.right != root)\
					temp = temp.right;\
				// the threading already exists\
				if(temp.right!=null)\{\
				    if(pre!=null && pre.val > root.val)\{\
				        if(first==null)\{first = pre;second = root;\}\
				        else\{second = root;\}\
				    \}\
				    pre = root;\
				    \
					temp.right = null;\
					root = root.right;\
				\}else\{\
					// construct the threading\
					temp.right = root;\
					root = root.left;\
				\}\
			\}else\{\
				if(pre!=null && pre.val > root.val)\{\
				    if(first==null)\{first = pre;second = root;\}\
				    else\{second = root;\}\
				\}\
				pre = root;\
				root = root.right;\
			\}\
		\}\
		// swap two node values;\
		if(first!= null && second != null)\{\
		    int t = first.val;\
		    first.val = second.val;\
		    second.val = t;\
		\}\
    \}\
\}\
}