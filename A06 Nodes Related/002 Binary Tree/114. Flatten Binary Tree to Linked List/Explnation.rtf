{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\f0\fs22 \cf0 ###############################Link###########################################\
https://www.youtube.com/watch?v=NOKVBiJwkD0\
https://www.youtube.com/watch?v=v2ob-ek9TgE\
################################Approach######################################\
###############################Algorithms######################################\
\
################################Other###########################################\
class Solution \{\
    public void flatten(TreeNode root) \{\
        if (root == null) return; \
        \
        TreeNode tempLeft = root.left; \
        TreeNode tempRight = root.right; \
        \
        root.left = null; \
        \
        flatten(tempLeft);\
        flatten(tempRight);\
        \
        root.right = tempLeft;         //move the left part to right part\
        TreeNode current = root; \
        while(current.right != null) current = current.right;   //check the last node is null or not, and connect to right part\
        current.right = tempRight;\
    \}\
\}}