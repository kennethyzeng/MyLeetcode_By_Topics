{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Arial-BoldMT;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red38\green38\blue38;
\red204\green204\blue202;\red143\green215\blue255;\red212\green213\blue152;\red67\green193\blue160;\red73\green140\blue207;
\red167\green197\blue150;\red184\green112\blue179;\red29\green38\blue42;\red245\green247\blue249;\red151\green0\blue126;
\red73\green17\blue135;\red20\green0\blue196;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c83591\c83590\c83069;\cssrgb\c62095\c87346\c100000;\cssrgb\c86200\c86120\c65973;\cssrgb\c30694\c79083\c69026;\cssrgb\c34777\c62428\c84960;
\cssrgb\c71112\c80895\c65487;\cssrgb\c77632\c52918\c75320;\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;\cssrgb\c66667\c5098\c56863;
\cssrgb\c36078\c14902\c60000;\cssrgb\c10980\c0\c81176;}
\margl1440\margr1440\vieww13400\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs56 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Huffman CodeLeetco
\f0\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 ##################################\
List<List<String>> result = new ArrayList<>();\
\
\
\
Map<String, List<String>> map = new HashMap<>();\
\
\
StringBuilder sb = new StringBuilder();\
\
\
Queue<Integer> queue = new LinkedList();\
\
\
StringBuilder sb = new StringBuilder();\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf2 \expnd0\expndtw0\kerning0
List<int[]> result = new ArrayList<>();
\f0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
String[] words = paragraph.toLowerCase().split("[ !?',;.]+");\
\
\
Collections.addAll(queue, strArr);  			/leetcode 297\
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf2 \expnd0\expndtw0\kerning0
 Arrays.sort(interval, (int[]a, int[]b) ->a[0] - b[0]);   //leetcode 253\
 PriorityQueue<Integer> minHeap = new PriorityQueu<>((a,b)->a-b); \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 \
###############################################################\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf2 \expnd0\expndtw0\kerning0
int[][] intervals
\f0 \kerning1\expnd0\expndtw0 \

\f2 \expnd0\expndtw0\kerning0
for(int i = 1; i < intervals.length;i ++ )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 \
\
\
##############################################################\
\
##################################create multiple sb##################################\
        StringBuilder[]  sbs = new StringBuilder[numRows]; \
        for (int i = 0; i < numRows; i ++)\{\
            sbs[i] = new StringBuilder();\
        \}\
\
##################################MinHeap##################################\
\pard\pardeftab720\sl360\partightenfactor0

\f2 \cf2 \expnd0\expndtw0\kerning0
PriorityQueue<Integer> minHeap; \
minHeap = new PriorityQueue<>(k);     //k is size\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 ##################################maxHeap##################################
\f2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2  PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a); \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 ###############################leetcode 218#####################################
\f2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2         List<int[]> buildLines = new ArrayList<>();\
        \
        for (int[] point : buildings )\{\
            buildLines.add(new int[] \{point[0], -point[2]\});\
            buildLines.add(new int[] \{point[1], point[2]\});\
        \}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 #############################leetcode 218#######################################
\f2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2         Collections.sort(buildLines, (a, b)->\{\
           if (a[0] != b[0]) \{return a[0] - b[0];\}\
            else \{return a[1] - b[1];\}\
        \});\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 \kerning1\expnd0\expndtw0 #############################leetcode 218#######################################\
List<List<Integer>> list = new ArrayList<>(); \
list.add(Arrays.asList(point[0], curHeight)); 
\f2 \expnd0\expndtw0\kerning0
\
\
\
############################Leetcode 76############################################\
\pard\pardeftab720\sl416\partightenfactor0

\fs26 \cf12 \cb13    \cf14 int\cf12  [] \cf15 map\cf12  = \cf14 new\cf12  \cf14 int\cf12 [\cf16 128\cf12 ];\
    \cf14 for\cf12  (\cf14 char\cf12  c : t.toCharArray()) \{\
      \cf15 map\cf12 [c]++;\
    \}\
//input each character into corresponding index position }