Java Iterative Using Long

public class Solution {
    public boolean isAdditiveNumber(String num) {
        int n = num.length();
        for (int i = 1; i <= n / 2; ++i)
            for (int j = 1; Math.max(j, i) <= n - i - j; ++j)
                if (isValid(i, j, num)) return true;
        return false;
    }
    private boolean isValid(int i, int j, String num) {
        if (num.charAt(0) == '0' && i > 1) return false;
        if (num.charAt(i) == '0' && j > 1) return false;
        String sum;
        Long x1 = Long.parseLong(num.substring(0, i));
        Long x2 = Long.parseLong(num.substring(i, i + j));
        for (int start = i + j; start != num.length(); start += sum.length()) {
            x2 = x2 + x1;
            x1 = x2 - x1;
            sum = x2.toString();
            if (!num.startsWith(sum, start)) return false;
        }
        return true;
    }
}
// Runtime: 3ms

=========================Python 3====================================
class Solution:
    def isAdditiveNumber(self, num: str) -> bool:
      length = len(num)
      for i in range(1, length):
        for j in range(i + 1, length):
          first, second, remaining = num[:i], num[i:j], num[j:]
          if (first.startswith('0') and first != '0') or (second.startswith('0') and second != '0'):
            continue
          while remaining:
            third = str(int(first) + int(second))
            if not remaining.startswith(third):
              break
            first = second
            second = third
            remaining = remaining[len(third):]
          if not remaining:
            return True
      return False